import React, { useState, useCallback, useEffect, useRef } from "react";

import { View, Alert, StyleSheet, TouchableOpacity, Dimensions, Text, SafeAreaView, Image } from "react-native";
import YoutubePlayer from "react-native-youtube-iframe";
import Icon from 'react-native-vector-icons/MaterialIcons';
import * as ScreenOrientation from 'expo-screen-orientation';
import Slider from '@react-native-community/slider';
import { LinearGradient } from 'expo-linear-gradient';

export default function App() {
  const [playing, setPlaying] = useState(true);
  const [videoReady, setVideoReady] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [controlsVisible, setControlsVisible] = useState(true);
  const [videoEnded, setVideoEnded] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const playerRef = useRef();
  const progressInterval = useRef();
  const controlsTimeout = useRef();
  const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

  useEffect(() => {

    // Start in portrait mode by default (no initial lock)
    
    const dimensionsListener = Dimensions.addEventListener('change', updateDimensions);
    
    return () => {
      // Ensure we unlock orientation when component unmounts
      ScreenOrientation.unlockAsync();
      dimensionsListener.remove();
      if (progressInterval.current) {
        clearInterval(progressInterval.current);
      }
      if (controlsTimeout.current) {
        clearTimeout(controlsTimeout.current);
      }
    };
  }, []);

  // Handle fullscreen toggle
  const toggleFullscreen = async () => {
    if (isFullscreen) {
      // Return to portrait
      await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.PORTRAIT_UP);
      setIsFullscreen(false);
    } else {
      // Go to landscape
      await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.LANDSCAPE);
      setIsFullscreen(true);
    }
  };

  useEffect(() => {
    if (playing && videoReady) {
      progressInterval.current = setInterval(() => {
        playerRef.current?.getCurrentTime().then(time => {
          setCurrentTime(time);
        });
        
        // Periodically check duration to ensure it's correct
        playerRef.current?.getDuration().then(duration => {
          if (duration && duration > 0 && Math.abs(duration - duration) > 1) {
            setDuration(duration);
          }
        });
      }, 1000);
    } else if (progressInterval.current) {
      clearInterval(progressInterval.current);
    }
    return () => {
      if (progressInterval.current) {
        clearInterval(progressInterval.current);
      }
    };
  }, [playing, videoReady]);

  useEffect(() => {
    if (controlsVisible) {
      if (controlsTimeout.current) {
        clearTimeout(controlsTimeout.current);
      }
      controlsTimeout.current = setTimeout(() => {
        setControlsVisible(false);
      }, 5000);
    }
    return () => {
      if (controlsTimeout.current) {
        clearTimeout(controlsTimeout.current);
      }
    };
  }, [controlsVisible]);
  
  const updateDimensions = () => {
    setVideoReady(false);
    setTimeout(() => setVideoReady(true), 100);
  };

  const getYoutubeVideoId = (url) => {
    const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
    const match = url.match(regExp);
    return (match && match[2].length === 11) ? match[2] : null;
  };

  const youtubeUrl = "https://youtu.be/KOMtMTuKAm0";
  const videoId = getYoutubeVideoId(youtubeUrl);

  const [isBuffering, setIsBuffering] = useState(false);

  const onStateChange = useCallback((state) => {
    if (state === "ended") {
      setPlaying(false);
      setVideoEnded(true);
      Alert.alert("video has finished playing!");
    } else if (state === "paused") {
      // When video is paused, make sure controls are visible
      setControlsVisible(true);
    } else if (state === "buffering") {
      setIsBuffering(true);
    } else if (state === "playing") {
      setIsBuffering(false);
    }
  }, []);
  
  const onReady = useCallback(() => {
    setVideoReady(true);
    setVideoEnded(false);
    
    // Add error handling and retry logic for duration
    const getDurationWithRetry = (attempts = 3) => {
      playerRef.current?.getDuration()
        .then(duration => {
          if (duration && duration > 0) {
            setDuration(duration);
          } else if (attempts > 0) {
            // If duration is 0 or undefined, retry after a short delay
            setTimeout(() => getDurationWithRetry(attempts - 1), 1000);
          }
        })
        .catch(error => {
          console.error("Error getting duration:", error);
          if (attempts > 0) {
            setTimeout(() => getDurationWithRetry(attempts - 1), 1000);
          }
        });
    };
    
    getDurationWithRetry();
  }, []);

  const seekBackward = () => {
    playerRef.current?.getCurrentTime().then((currentTime) => {
      playerRef.current?.seekTo(Math.max(currentTime - 10, 0), true);
    });
  };

  const seekForward = () => {
    playerRef.current?.getCurrentTime().then((currentTime) => {
      playerRef.current?.seekTo(currentTime + 10, true);
    });
  };

  const onSliderValueChange = (value) => {
    playerRef.current?.seekTo(value, true);
    setCurrentTime(value);
  };

  const formatTime = (timeInSeconds) => {
    const minutes = Math.floor(timeInSeconds / 60);
    const seconds = Math.floor(timeInSeconds % 60);
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  };

  const showControls = () => {
    setControlsVisible(true);
  };

  // Add a useEffect to reset duration when videoId changes
  useEffect(() => {
    if (videoId) {
      setDuration(0);
      setCurrentTime(0);
    }
  }, [videoId]);

  // Calculate player dimensions based on orientation
  const playerWidth = isFullscreen 
    ? screenWidth * 0.8  // Reduce to 80% of screen width in landscape
    : screenWidth;

  const playerHeight = isFullscreen 
    ? screenWidth * 0.8 * 9/16  // Maintain aspect ratio with reduced width
    : screenWidth * 9/16;

  // Center the player in fullscreen mode
  const containerStyle = isFullscreen ? {
    width: screenWidth,
    height: screenHeight,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#000',
  } : {
    height: playerHeight,
    width: playerWidth,
    backgroundColor: '#000',
  };

  return (
    <SafeAreaView style={{flex: 1, backgroundColor: '#000'}}>
      <View style={styles.container}>

        <View style={[
          styles.videoContainer, 
          containerStyle
        ]}>
          <YoutubePlayer
            ref={playerRef}
            height={playerHeight}
            width={playerWidth}
            play={playing}
            videoId={videoId}
            onChangeState={onStateChange}
            onReady={onReady}
            onPlaybackQualityChange={(quality) => {
              console.log("Playback Quality Changed:", quality);
            }}
            onError={(error) => {
              console.error("YouTube Player Error:", error);
              Alert.alert("Error", "An error occurred while loading the video.");
            }}
            initialPlayerParams={{

              preventFullScreen: true, // Prevent YouTube's fullscreen to use our custom one
              rel: 0,
              modestbranding: 1,

              controls: 0, // Hide YouTube controls to use our custom ones
              showinfo: 0,
              playsinline: 1,
              iv_load_policy: 0,
              fs: 0,
              autohide: 1,

              autoplay: 1,
              enablejsapi: 1,
              origin: 'https://yourdomain.com',
              preload: true,
            }}
            webViewProps={{
              androidLayerType: 'hardware',
              androidHardwareAccelerationDisabled: false,
              javaScriptEnabled: true,
              domStorageEnabled: true,
              allowsFullscreenVideo: true,
              renderToHardwareTextureAndroid: true,
              
              // Add these optimizations
              cacheEnabled: true,
              cacheMode: 'LOAD_DEFAULT',
              mediaPlaybackRequiresUserAction: false,
              allowsInlineMediaPlayback: true,
              
              // Improve WebView performance
              startInLoadingState: true,
              scalesPageToFit: true,
              useWebKit: true,
              
              onLayout: () => {},
            }}
            forceAndroidAutoplay={true}
          />
          <TouchableOpacity 
            style={styles.touchableOverlay} 
            onPress={showControls}
            activeOpacity={1}
          >
            <View style={[styles.overlay, (!videoReady || !controlsVisible) && !videoEnded && styles.hidden]}>
              {/* Add gradient overlay for better text visibility */}
              <LinearGradient
                colors={['transparent', 'rgba(29, 119, 188, 0.3)']}  // Added a hint of #1d77bc
                style={styles.gradientOverlay}
              />
              
              <View style={styles.topControls}>
                <TouchableOpacity onPress={toggleFullscreen} style={styles.controlButton}>
                  <Icon name={isFullscreen ? "fullscreen-exit" : "fullscreen"} size={24} color="white" />
                </TouchableOpacity>
              </View>
              
              <View style={styles.centerControls}>
                <TouchableOpacity style={styles.controlButton} onPress={seekBackward}>
                  <Icon name="replay-10" size={36} color="white" />
                </TouchableOpacity>
                <TouchableOpacity style={styles.playPauseButton} onPress={() => setPlaying(!playing)}>
                  <Icon name={playing ? "pause" : "play-arrow"} size={42} color="white" />
                </TouchableOpacity>
                <TouchableOpacity style={styles.controlButton} onPress={seekForward}>
                  <Icon name="forward-10" size={36} color="white" />
                </TouchableOpacity>
              </View>
              
              <View style={styles.sliderContainer}>
                <View style={styles.timeText}>
                  <Text style={styles.time}>{formatTime(currentTime)}</Text>
                  <Text style={styles.time}>{formatTime(duration)}</Text>
                </View>
                <Slider
                  style={styles.slider}
                  minimumValue={0}
                  maximumValue={duration}
                  value={currentTime}
                  onValueChange={onSliderValueChange}
                  minimumTrackTintColor="#1d77bc"
                  maximumTrackTintColor="rgba(255,255,255,0.3)"
                  thumbTintColor="#FFFFFF"
                />
              </View>
            </View>
            {videoEnded && (
              <View style={styles.endedOverlay}>
                <TouchableOpacity 
                  style={styles.replayButton}
                  onPress={() => {
                    setVideoEnded(false);
                    setPlaying(true);
                    playerRef.current?.seekTo(0, true);
                  }}
                >
                  <Icon name="replay" size={50} color="white" />
                  <Text style={styles.replayText}>Replay</Text>
                </TouchableOpacity>
              </View>
            )}
          </TouchableOpacity>
        </View>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 0,
    backgroundColor: '#000',
    alignItems: 'center',
    justifyContent: 'flex-start',
  },
  videoContainer: {
    position: 'relative',
    backgroundColor: '#000',
    borderRadius: 8,
    overflow: 'hidden',
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
  },
  touchableOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'transparent',
  },
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'transparent',
    zIndex: 1,
  },
  gradientOverlay: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    height: 150,
  },
  endedOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    zIndex: 2,
    justifyContent: 'center',
    alignItems: 'center',
  },
  hidden: {
    opacity: 0,
  },
  topControls: {
    position: 'absolute',
    top: 0,
    right: 0,
    flexDirection: 'row',
    justifyContent: 'flex-end',
    padding: 12,
    zIndex: 2,
  },
  controlButton: {
    backgroundColor: 'rgba(29, 119, 188, 0.5)',  // Changed to #1d77bc with 0.5 opacity
    borderRadius: 20,
    padding: 8,
    marginHorizontal: 4,
  },
  centerControls: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    gap: 30,
  },
  playPauseButton: {

    backgroundColor: 'rgba(29, 119, 188, 0.8)',
    borderRadius: 30,
    width: 60,
    height: 60,
    justifyContent: 'center',
    alignItems: 'center',
  },
  sliderContainer: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    paddingHorizontal: 16,
    paddingBottom: 16,
    paddingTop: 8,
  },
  slider: {
    width: '100%',
    height: 40,
  },
  timeText: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 5,
    marginBottom: -8,
  },
  time: {
    color: 'white',
    fontSize: 12,
    fontWeight: '600',
  },
  bufferingContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    zIndex: 3,
  },
  videoInfo: {
    position: 'absolute',
    top: 50,
    left: 16,
    right: 16,
    zIndex: 2,
  },
  videoTitle: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    textShadowColor: 'rgba(0, 0, 0, 0.75)',
    textShadowOffset: {width: -1, height: 1},
    textShadowRadius: 10,
  },
  replayButton: {
    backgroundColor: 'rgba(29, 119, 188, 0.8)',  // Using #1d77bc with 0.8 opacity
    borderRadius: 40,
    width: 80,
    height: 80,
    justifyContent: 'center',
    alignItems: 'center',
  },
  replayText: {
    color: 'white',
    marginTop: 5,
    fontSize: 14,
    fontWeight: 'bold',
  }
});